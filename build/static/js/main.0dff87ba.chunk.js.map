{"version":3,"sources":["components/Notification.js","services/persons.js","Phonebook.js","App.js","serviceWorker.js","index.js"],"names":["Notification","message","className","baseUrl","request","axios","get","nonExisting","id","name","then","response","data","concat","newObject","post","delete","Phonebook","useState","book","setBook","setName","number","setNumber","errorMessage","fetch","personService","initialPersons","useEffect","handleDelete","e","target","map","item","key","onClick","onSubmit","event","preventDefault","returnedPerson","onChange","value","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"uOAceA,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,I,gBCRDE,EAAU,eA4BD,EAzBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJC,KAAM,sCAER,OAAOL,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAmBxC,EAfA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EALA,SAACJ,GAEd,OADgBH,IAAMW,OAAN,UAAgBb,EAAhB,YAA2BK,IAC5BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8C5BK,MAnEf,WAAsB,IAAD,EACKC,mBAAS,IADd,mBACZC,EADY,KACNC,EADM,OAEKF,qBAFL,mBAEZT,EAFY,KAENY,EAFM,OAGSH,qBAHT,mBAGZI,EAHY,KAGJC,EAHI,OAKqBL,mBAAS,MAL9B,mBAKZM,EALY,KASbC,GATa,KASL,WACVC,IAAuBhB,MAAK,SAAAiB,GAAc,OAAIP,EAAQO,QAExDC,qBAAU,WACVH,MACC,IAEH,IAkBMI,EAAe,SAACC,GACdJ,EACQI,EAAEC,OAAOvB,IAAIE,MAAK,kBAAMe,QAYxC,OACE,yBAAKvB,UAAU,OACb,0CACA,kBAAC,EAAD,CAAcD,QAASuB,IACvB,4BACGL,EAAKa,KAAI,SAACC,GAAD,OACR,wBAAIC,IAAKD,EAAKzB,IAAd,IAAoByB,EAAKzB,GAAzB,IAA8ByB,EAAKxB,KAAnC,IAA0CwB,EAAKX,OAA/C,IAAuD,4BAAQd,GAAIyB,EAAKzB,GAAI2B,QAASN,GAA9B,eAI3D,0BAAMO,SA1CQ,SAACC,GACjBA,EAAMC,iBAMJZ,EALmB,CACjBjB,KAAMA,EACNa,OAAQA,IAKTZ,MAAK,SAAA6B,GACFnB,EAAQD,EAAKN,OAAO0B,IACpBlB,EAAQ,SAgCV,2BAAOmB,SAAU,SAACV,GAAD,OAAOT,EAAQS,EAAEC,OAAOU,QAAQC,KAAK,OAAOC,YAAY,SACzE,2BAAOH,SAAU,SAACV,GAAD,OAAOP,EAAUO,EAAEC,OAAOU,QAAQC,KAAK,OAAOC,YAAY,WAC3E,4BAAQD,KAAK,UAAb,aCvDOE,MARf,WACE,OACE,8BACE,kBAAC,EAAD,QCMcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5D,c","file":"static/js/main.0dff87ba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    name: 'This Person is not saved to server',\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n  // return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove}","import React, { useEffect, useState } from 'react';\r\nimport Notification from './components/Notification'\r\nimport personService from './services/persons'\r\n\r\n\r\nfunction Phonebook() {\r\n  const [book, setBook] = useState([]);\r\n  const [name, setName] = useState();\r\n  const [number, setNumber] = useState();\r\n\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n\r\n\r\n  const fetch = () => {\r\n      personService.getAll().then(initialPersons => setBook(initialPersons))\r\n  }\r\n    useEffect(() => {\r\n    fetch();\r\n  }, [])\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const personObject = {\r\n        name: name,\r\n        number: number,\r\n      }\r\n\r\n      personService\r\n      .create(personObject)\r\n      .then(returnedPerson => {\r\n          setBook(book.concat(returnedPerson))\r\n          setName('')\r\n      })\r\n    \r\n  }\r\n  \r\n\r\n\r\n  const handleDelete = (e) => {\r\n          personService\r\n          .remove(e.target.id).then(() => fetch())\r\n  }\r\n\r\n//   const handleSubmit = async () => {\r\n//     const checkPerson = book.find(person => person.name === name)\r\n//     if (checkPerson) {\r\n//         personService.update(checkPerson.id, {name, number}).then(() => fetch())\r\n//     } else {\r\n//         personService.create({name, number}).then(() => fetch())\r\n//     }\r\n//   }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phone Book</h1>\r\n      <Notification message={errorMessage} />\r\n      <ul>\r\n        {book.map((item) => \r\n          <li key={item.id}> {item.id} {item.name} {item.number} <button id={item.id} onClick={handleDelete}>delete</button></li>\r\n        )}\r\n      </ul>\r\n\r\n      <form onSubmit={addPerson}>\r\n        <input onChange={(e) => setName(e.target.value)} type='text' placeholder='name'/>\r\n        <input onChange={(e) => setNumber(e.target.value)} type='text' placeholder='number'/>\r\n        <button type='submit'>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phonebook;","import React from 'react'\r\nimport Phonebook from './Phonebook'\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Phonebook />\r\n    </main>\r\n  ) ;\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}