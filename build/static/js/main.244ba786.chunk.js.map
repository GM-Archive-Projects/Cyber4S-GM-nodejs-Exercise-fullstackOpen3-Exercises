{"version":3,"sources":["services/persons.js","Phonebook.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Phonebook","useState","book","setBook","name","setName","number","setNumber","fetch","personService","initialPersons","useEffect","handleDelete","e","target","className","map","item","key","onClick","onSubmit","personExist","find","person","personObject","returnedPerson","concat","onChange","value","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uPACMA,EAAU,eA8BD,EA3BA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAyB5B,EApBA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACG,GAEd,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8D5BM,MAlFf,WAAsB,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEIF,qBAFJ,mBAEbG,EAFa,KAEPC,EAFO,OAGQJ,qBAHR,mBAGbK,EAHa,KAGLC,EAHK,KAKdC,EAAQ,WACbC,IAAuBjB,MAAK,SAACkB,GAAD,OAAoBP,EAAQO,OAEzDC,qBAAU,WACTH,MACE,IAkBH,IAmBMI,EAAe,SAACC,GACrBJ,EAAqBI,EAAEC,OAAOjB,IAAIL,MAAK,kBAAMgB,QAG9C,OACC,yBAAKO,UAAU,OACd,0CACA,4BACEb,EAAKc,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKpB,IACZoB,EAAKb,KADP,IACca,EAAKX,OAAQ,IAC1B,4BAAQT,GAAIoB,EAAKpB,GAAIsB,QAASP,GAA9B,eAOH,0BAAMQ,SArCW,WAChB,IAAMC,EAAcnB,EAAKoB,MAAK,SAACC,GAAD,OAAYA,EAAOnB,OAASA,KAEpDoB,EAAe,CACnBpB,KAAMA,EACNE,OAAQA,GAERe,EAEAZ,EAAqBY,EAAYxB,GAAI2B,GAEpCf,EACQe,GACPhC,MAAK,SAAAiC,GACFtB,EAAQD,EAAKwB,OAAOD,IACpBpB,EAAQ,SAuBf,2BACCsB,SAAU,SAACd,GAAD,OAAOR,EAAQQ,EAAEC,OAAOc,QAClCC,KAAK,OACLC,YAAY,SAEb,2BACCH,SAAU,SAACd,GAAD,OAAON,EAAUM,EAAEC,OAAOc,QACpCC,KAAK,OACLC,YAAY,WAEb,4BAAQD,KAAK,UAAb,aCpEWE,MARf,WACE,OACE,8BACE,kBAAC,EAAD,QCMcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.244ba786.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\n  \r\n\r\n\r\nexport default { getAll, create, update, remove}","import React, { useEffect, useState } from \"react\";\r\nimport personService from \"./services/persons\";\r\n\r\nfunction Phonebook() {\r\n\tconst [book, setBook] = useState([]);\r\n\tconst [name, setName] = useState();\r\n\tconst [number, setNumber] = useState();\r\n\r\n\tconst fetch = () => {\r\n\t\tpersonService.getAll().then((initialPersons) => setBook(initialPersons));\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tfetch();\r\n\t}, []);\r\n\r\n\t// const addPerson = (event) => {\r\n\t//   event.preventDefault()\r\n\t//   const personObject = {\r\n\t//       name: name,\r\n\t//       number: number,\r\n\t//     }\r\n\r\n\t//     personService\r\n\t//     .create(personObject)\r\n\t//     .then(returnedPerson => {\r\n\t//         setBook(book.concat(returnedPerson))\r\n\t//         setName('')\r\n\t//     })\r\n\r\n\t// }\r\n\r\n\tconst handleSend = () => {\r\n    const personExist = book.find((person) => person.name === name);\r\n    debugger\r\n    const personObject = {\r\n      name: name,\r\n      number: number,\r\n    };\r\n\t\tif (personExist) {\r\n      // const persIndex = book.findIndex((pers) => pers.id === personExist.id)\r\n      personService.update(personExist.id, personObject)\r\n\t\t} else {\r\n\t\t\t    personService\r\n\t\t\t    .create(personObject)\r\n\t\t\t    .then(returnedPerson => {\r\n\t\t\t        setBook(book.concat(returnedPerson))\r\n\t\t\t        setName('')\r\n\t\t}\r\n\t)}};\r\n\r\n\tconst handleDelete = (e) => {\r\n\t\tpersonService.remove(e.target.id).then(() => fetch());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1>Phone Book</h1>\r\n\t\t\t<ul>\r\n\t\t\t\t{book.map((item) => (\r\n\t\t\t\t\t<li key={item.id}>\r\n\t\t\t\t\t\t{item.name} {item.number}{\" \"}\r\n\t\t\t\t\t\t<button id={item.id} onClick={handleDelete}>\r\n\t\t\t\t\t\t\tdelete\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\r\n\t\t\t<form onSubmit={handleSend}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={(e) => setNumber(e.target.value)}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"number\"\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Phonebook;\r\n","import React from 'react'\r\nimport Phonebook from './Phonebook'\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Phonebook />\r\n    </main>\r\n  ) ;\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}